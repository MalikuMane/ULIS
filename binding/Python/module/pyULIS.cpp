// IDDN FR.001.250001.004.S.X.2019.000.00000
// ULIS is subject to copyright laws and is the legal and intellectual property of Praxinos,Inc
/*
*   ULIS
*__________________
* @file         pyULIS.cpp
* @author       Clement Berthaud
* @brief        Binding of ULIS for Python.
* @copyright    Copyright 2018-2021 Praxinos, Inc. All Rights Reserved.
* @license      Please refer to LICENSE.md
*/
#include <ULIS>
#include <pybind11/pybind11.h>
#include <pybind11/operators.h>
using namespace ::ULIS;
using namespace pybind11::literals;
namespace py = pybind11;



/////////
// pyULIS4
PYBIND11_MODULE( pyULIS4, m ) {
    m.doc() = "pyULIS4 module, a python binding for ULIS.";



    /////////
    // eColorModel
    py::enum_< eColorModel >( m, "eColorModel", py::arithmetic() )
        .value( "ColorModel_GREY",  eColorModel::ColorModel_GREY    )
        .value( "ColorModel_RGB",   eColorModel::ColorModel_RGB     )
        .value( "ColorModel_HSV",   eColorModel::ColorModel_HSV     )
        .value( "ColorModel_HSL",   eColorModel::ColorModel_HSL     )
        .value( "ColorModel_CMY",   eColorModel::ColorModel_CMY     )
        .value( "ColorModel_CMYK",  eColorModel::ColorModel_CMYK    )
        .value( "ColorModel_YUV",   eColorModel::ColorModel_YUV     )
        .value( "ColorModel_Lab",   eColorModel::ColorModel_Lab     )
        .value( "ColorModel_XYZ",   eColorModel::ColorModel_XYZ     )
        .value( "ColorModel_Yxy",   eColorModel::ColorModel_Yxy     );



    /////////
    // eType
    py::enum_< eType >( m, "eType", py::arithmetic() )
        .value( "Type_uint8",   eType::Type_uint8   )
        .value( "Type_uint16",  eType::Type_uint16  )
        .value( "Type_ufloat",  eType::Type_ufloat  );



    /////////
    // eFormat
    py::enum_< eFormat >( m, "eFormat", py::arithmetic() )
        .value( "Format_G8",        eFormat::Format_G8      )
        .value( "Format_GA8",       eFormat::Format_GA8     )
        .value( "Format_AG8",       eFormat::Format_AG8     )
        .value( "Format_G16",       eFormat::Format_G16     )
        .value( "Format_GA16",      eFormat::Format_GA16    )
        .value( "Format_AG16",      eFormat::Format_AG16    )
        .value( "Format_GF",        eFormat::Format_GF      )
        .value( "Format_GAF",       eFormat::Format_GAF     )
        .value( "Format_AGF",       eFormat::Format_AGF     )
        .value( "Format_RGB8",      eFormat::Format_RGB8    )
        .value( "Format_BGR8",      eFormat::Format_BGR8    )
        .value( "Format_RGBA8",     eFormat::Format_RGBA8   )
        .value( "Format_ABGR8",     eFormat::Format_ABGR8   )
        .value( "Format_ARGB8",     eFormat::Format_ARGB8   )
        .value( "Format_BGRA8",     eFormat::Format_BGRA8   )
        .value( "Format_RGB16",     eFormat::Format_RGB16   )
        .value( "Format_BGR16",     eFormat::Format_BGR16   )
        .value( "Format_RGBA16",    eFormat::Format_RGBA16  )
        .value( "Format_ABGR16",    eFormat::Format_ABGR16  )
        .value( "Format_ARGB16",    eFormat::Format_ARGB16  )
        .value( "Format_BGRA16",    eFormat::Format_BGRA16  )
        .value( "Format_RGBF",      eFormat::Format_RGBF    )
        .value( "Format_BGRF",      eFormat::Format_BGRF    )
        .value( "Format_RGBAF",     eFormat::Format_RGBAF   )
        .value( "Format_ABGRF",     eFormat::Format_ABGRF   )
        .value( "Format_ARGBF",     eFormat::Format_ARGBF   )
        .value( "Format_BGRAF",     eFormat::Format_BGRAF   )
        .value( "Format_HSV8",      eFormat::Format_HSV8    )
        .value( "Format_VSH8",      eFormat::Format_VSH8    )
        .value( "Format_HSVA8",     eFormat::Format_HSVA8   )
        .value( "Format_AVSH8",     eFormat::Format_AVSH8   )
        .value( "Format_AHSV8",     eFormat::Format_AHSV8   )
        .value( "Format_VSHA8",     eFormat::Format_VSHA8   )
        .value( "Format_HSV16",     eFormat::Format_HSV16   )
        .value( "Format_VSH16",     eFormat::Format_VSH16   )
        .value( "Format_HSVA16",    eFormat::Format_HSVA16  )
        .value( "Format_AVSH16",    eFormat::Format_AVSH16  )
        .value( "Format_AHSV16",    eFormat::Format_AHSV16  )
        .value( "Format_VSHA16",    eFormat::Format_VSHA16  )
        .value( "Format_HSVF",      eFormat::Format_HSVF    )
        .value( "Format_VSHF",      eFormat::Format_VSHF    )
        .value( "Format_HSVAF",     eFormat::Format_HSVAF   )
        .value( "Format_AVSHF",     eFormat::Format_AVSHF   )
        .value( "Format_AHSVF",     eFormat::Format_AHSVF   )
        .value( "Format_VSHAF",     eFormat::Format_VSHAF   )
        .value( "Format_HSL8",      eFormat::Format_HSL8    )
        .value( "Format_LSH8",      eFormat::Format_LSH8    )
        .value( "Format_HSLA8",     eFormat::Format_HSLA8   )
        .value( "Format_ALSH8",     eFormat::Format_ALSH8   )
        .value( "Format_AHSL8",     eFormat::Format_AHSL8   )
        .value( "Format_LSHA8",     eFormat::Format_LSHA8   )
        .value( "Format_HSL16",     eFormat::Format_HSL16   )
        .value( "Format_LSH16",     eFormat::Format_LSH16   )
        .value( "Format_HSLA16",    eFormat::Format_HSLA16  )
        .value( "Format_ALSH16",    eFormat::Format_ALSH16  )
        .value( "Format_AHSL16",    eFormat::Format_AHSL16  )
        .value( "Format_LSHA16",    eFormat::Format_LSHA16  )
        .value( "Format_HSLF",      eFormat::Format_HSLF    )
        .value( "Format_LSHF",      eFormat::Format_LSHF    )
        .value( "Format_HSLAF",     eFormat::Format_HSLAF   )
        .value( "Format_ALSHF",     eFormat::Format_ALSHF   )
        .value( "Format_AHSLF",     eFormat::Format_AHSLF   )
        .value( "Format_LSHAF",     eFormat::Format_LSHAF   )
        .value( "Format_CMY8",      eFormat::Format_CMY8    )
        .value( "Format_YMC8",      eFormat::Format_YMC8    )
        .value( "Format_CMYA8",     eFormat::Format_CMYA8   )
        .value( "Format_AYMC8",     eFormat::Format_AYMC8   )
        .value( "Format_ACMY8",     eFormat::Format_ACMY8   )
        .value( "Format_YMCA8",     eFormat::Format_YMCA8   )
        .value( "Format_CMY16",     eFormat::Format_CMY16   )
        .value( "Format_YMC16",     eFormat::Format_YMC16   )
        .value( "Format_CMYA16",    eFormat::Format_CMYA16  )
        .value( "Format_AYMC16",    eFormat::Format_AYMC16  )
        .value( "Format_ACMY16",    eFormat::Format_ACMY16  )
        .value( "Format_YMCA16",    eFormat::Format_YMCA16  )
        .value( "Format_CMYF",      eFormat::Format_CMYF    )
        .value( "Format_YMCF",      eFormat::Format_YMCF    )
        .value( "Format_CMYAF",     eFormat::Format_CMYAF   )
        .value( "Format_AYMCF",     eFormat::Format_AYMCF   )
        .value( "Format_ACMYF",     eFormat::Format_ACMYF   )
        .value( "Format_YMCAF",     eFormat::Format_YMCAF   )
        .value( "Format_CMYK8",     eFormat::Format_CMYK8   )
        .value( "Format_KCMY8",     eFormat::Format_KCMY8   )
        .value( "Format_KYMC8",     eFormat::Format_KYMC8   )
        .value( "Format_YMCK8",     eFormat::Format_YMCK8   )
        .value( "Format_CMYKA8",    eFormat::Format_CMYKA8  )
        .value( "Format_ACMYK8",    eFormat::Format_ACMYK8  )
        .value( "Format_AKYMC8",    eFormat::Format_AKYMC8  )
        .value( "Format_KYMCA8",    eFormat::Format_KYMCA8  )
        .value( "Format_CMYK16",    eFormat::Format_CMYK16  )
        .value( "Format_KCMY16",    eFormat::Format_KCMY16  )
        .value( "Format_KYMC16",    eFormat::Format_KYMC16  )
        .value( "Format_YMCK16",    eFormat::Format_YMCK16  )
        .value( "Format_CMYKA16",   eFormat::Format_CMYKA16 )
        .value( "Format_ACMYK16",   eFormat::Format_ACMYK16 )
        .value( "Format_AKYMC16",   eFormat::Format_AKYMC16 )
        .value( "Format_KYMCA16",   eFormat::Format_KYMCA16 )
        .value( "Format_CMYKF",     eFormat::Format_CMYKF   )
        .value( "Format_KCMYF",     eFormat::Format_KCMYF   )
        .value( "Format_KYMCF",     eFormat::Format_KYMCF   )
        .value( "Format_YMCKF",     eFormat::Format_YMCKF   )
        .value( "Format_CMYKAF",    eFormat::Format_CMYKAF  )
        .value( "Format_ACMYKF",    eFormat::Format_ACMYKF  )
        .value( "Format_AKYMCF",    eFormat::Format_AKYMCF  )
        .value( "Format_KYMCAF",    eFormat::Format_KYMCAF  )
        .value( "Format_YUV8",      eFormat::Format_YUV8    )
        .value( "Format_VUY8",      eFormat::Format_VUY8    )
        .value( "Format_YUVA8",     eFormat::Format_YUVA8   )
        .value( "Format_AVUY8",     eFormat::Format_AVUY8   )
        .value( "Format_AYUV8",     eFormat::Format_AYUV8   )
        .value( "Format_VUYA8",     eFormat::Format_VUYA8   )
        .value( "Format_YUV16",     eFormat::Format_YUV16   )
        .value( "Format_VUY16",     eFormat::Format_VUY16   )
        .value( "Format_YUVA16",    eFormat::Format_YUVA16  )
        .value( "Format_AVUY16",    eFormat::Format_AVUY16  )
        .value( "Format_AYUV16",    eFormat::Format_AYUV16  )
        .value( "Format_VUYA16",    eFormat::Format_VUYA16  )
        .value( "Format_YUVF",      eFormat::Format_YUVF    )
        .value( "Format_VUYF",      eFormat::Format_VUYF    )
        .value( "Format_YUVAF",     eFormat::Format_YUVAF   )
        .value( "Format_AVUYF",     eFormat::Format_AVUYF   )
        .value( "Format_AYUVF",     eFormat::Format_AYUVF   )
        .value( "Format_VUYAF",     eFormat::Format_VUYAF   )
        .value( "Format_Lab8",      eFormat::Format_Lab8    )
        .value( "Format_baL8",      eFormat::Format_baL8    )
        .value( "Format_LabA8",     eFormat::Format_LabA8   )
        .value( "Format_AbaL8",     eFormat::Format_AbaL8   )
        .value( "Format_ALab8",     eFormat::Format_ALab8   )
        .value( "Format_baLA8",     eFormat::Format_baLA8   )
        .value( "Format_Lab16",     eFormat::Format_Lab16   )
        .value( "Format_baL16",     eFormat::Format_baL16   )
        .value( "Format_LabA16",    eFormat::Format_LabA16  )
        .value( "Format_AbaL16",    eFormat::Format_AbaL16  )
        .value( "Format_ALab16",    eFormat::Format_ALab16  )
        .value( "Format_baLA16",    eFormat::Format_baLA16  )
        .value( "Format_LabF",      eFormat::Format_LabF    )
        .value( "Format_baLF",      eFormat::Format_baLF    )
        .value( "Format_LabAF",     eFormat::Format_LabAF   )
        .value( "Format_AbaLF",     eFormat::Format_AbaLF   )
        .value( "Format_ALabF",     eFormat::Format_ALabF   )
        .value( "Format_baLAF",     eFormat::Format_baLAF   )
        .value( "Format_XYZ8",      eFormat::Format_XYZ8    )
        .value( "Format_ZYX8",      eFormat::Format_ZYX8    )
        .value( "Format_XYZA8",     eFormat::Format_XYZA8   )
        .value( "Format_AZYX8",     eFormat::Format_AZYX8   )
        .value( "Format_AXYZ8",     eFormat::Format_AXYZ8   )
        .value( "Format_ZYXA8",     eFormat::Format_ZYXA8   )
        .value( "Format_XYZ16",     eFormat::Format_XYZ16   )
        .value( "Format_ZYX16",     eFormat::Format_ZYX16   )
        .value( "Format_XYZA16",    eFormat::Format_XYZA16  )
        .value( "Format_AZYX16",    eFormat::Format_AZYX16  )
        .value( "Format_AXYZ16",    eFormat::Format_AXYZ16  )
        .value( "Format_ZYXA16",    eFormat::Format_ZYXA16  )
        .value( "Format_XYZF",      eFormat::Format_XYZF    )
        .value( "Format_ZYXF",      eFormat::Format_ZYXF    )
        .value( "Format_XYZAF",     eFormat::Format_XYZAF   )
        .value( "Format_AZYXF",     eFormat::Format_AZYXF   )
        .value( "Format_AXYZF",     eFormat::Format_AXYZF   )
        .value( "Format_ZYXAF",     eFormat::Format_ZYXAF   )
        .value( "Format_Yxy8",      eFormat::Format_Yxy8    )
        .value( "Format_yxY8",      eFormat::Format_yxY8    )
        .value( "Format_YxyA8",     eFormat::Format_YxyA8   )
        .value( "Format_AyxY8",     eFormat::Format_AyxY8   )
        .value( "Format_AYxy8",     eFormat::Format_AYxy8   )
        .value( "Format_yxYA8",     eFormat::Format_yxYA8   )
        .value( "Format_Yxy16",     eFormat::Format_Yxy16   )
        .value( "Format_yxY16",     eFormat::Format_yxY16   )
        .value( "Format_YxyA16",    eFormat::Format_YxyA16  )
        .value( "Format_AyxY16",    eFormat::Format_AyxY16  )
        .value( "Format_AYxy16",    eFormat::Format_AYxy16  )
        .value( "Format_yxYA16",    eFormat::Format_yxYA16  )
        .value( "Format_YxyF",      eFormat::Format_YxyF    )
        .value( "Format_yxYF",      eFormat::Format_yxYF    )
        .value( "Format_YxyAF",     eFormat::Format_YxyAF   )
        .value( "Format_AyxYF",     eFormat::Format_AyxYF   )
        .value( "Format_AYxyF",     eFormat::Format_AYxyF   )
        .value( "Format_yxYAF",     eFormat::Format_yxYAF   )
        .export_values();



    /////////
    // FFormatMetrics
    py::class_< FFormatMetrics >( m, "FFormatMetrics" )
        .def( py::init< eFormat >(), "format"_a )
        .def( py::init< const FFormatMetrics& >(), "other"_a )
        .def( "ReinterpretedType", &FFormatMetrics::ReinterpretedType )
        .def_readonly( "IDT", &FFormatMetrics::IDT )
        .def_readonly( "FMT", &FFormatMetrics::FMT )
        .def_readonly( "TP", &FFormatMetrics::TP )
        .def_readonly( "CM", &FFormatMetrics::CM )
        .def_readonly( "BPC", &FFormatMetrics::BPC )
        .def_readonly( "NCC", &FFormatMetrics::NCC )
        .def_readonly( "HEA", &FFormatMetrics::HEA )
        .def_readonly( "RSC", &FFormatMetrics::RSC )
        .def_readonly( "SPP", &FFormatMetrics::SPP )
        .def_readonly( "BPP", &FFormatMetrics::BPP )
        .def_readonly( "AID", &FFormatMetrics::AID )
        .def_readonly( "REV", &FFormatMetrics::REV )
        .def_readonly( "SWA", &FFormatMetrics::SWA )
        .def_readonly( "PRE", &FFormatMetrics::PRE )
        .def_readonly( "LIN", &FFormatMetrics::LIN )
        .def_readonly( "PRO", &FFormatMetrics::PRO )
        .def_readonly( "PLA", &FFormatMetrics::PLA )
        .def(
              "RedirectedIndex"
            , []( const FFormatMetrics& self, int index ) {
                return  self.IDT[ index ];
            }
        );



    /////////
    // FColorSpace
    py::class_< FColorSpace >( m, "FColorSpace" )
        .def( py::init<>() );



    /////////
    // FOnInvalidBlock
    py::class_< FOnInvalidBlock >( m, "FOnInvalidBlock" )
        .def( py::init<>() )
        .def( py::init< FOnInvalidBlock::tFptr, void* >(), "fptr"_a, "info"_a = nullptr )
        .def( "ExecuteIfBound", &FOnInvalidBlock::ExecuteIfBound )
        .def( "Execute", &FOnInvalidBlock::Execute );



    /////////
    // FOnCleanupData
    py::class_< FOnCleanupData >( m, "FOnCleanupData" )
        .def( py::init<>() )
        .def( py::init< FOnCleanupData::tFptr, void* >(), "fptr"_a, "info"_a = nullptr )
        .def( "ExecuteIfBound", &FOnCleanupData::ExecuteIfBound )
        .def( "Execute", &FOnCleanupData::Execute )
        .def_static(
              "OnCleanupFreeMemory"
            , []() {
                return  FOnCleanupData( &OnCleanup_FreeMemory );
            }
        );



    /////////
    // Vec Utils
    #define PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTION( CLASS, E0, E1 )            .def( ULIS_STRINGIFY( E0 ## E1 ), & CLASS :: E0 ## E1 )
    #define PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTION( CLASS, E0, E1, E2 )        .def( ULIS_STRINGIFY( E0 ## E1 ## E2 ), & CLASS :: E0 ## E1 ## E2 )
    #define PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTION( CLASS, E0, E1, E2, E3 )    .def( ULIS_STRINGIFY( E0 ## E1 ## E2 ## E3 ), & CLASS :: E0 ## E1 ## E2 ## E3 )
    #define PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS ) ULIS_FOR_ALL_VEC2_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS, PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS ) ULIS_FOR_ALL_VEC2_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS, PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS ) ULIS_FOR_ALL_VEC2_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS, PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS ) ULIS_FOR_ALL_VEC3_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS, PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS ) ULIS_FOR_ALL_VEC3_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS, PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS ) ULIS_FOR_ALL_VEC3_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS, PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS ) ULIS_FOR_ALL_VEC4_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS, PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS ) ULIS_FOR_ALL_VEC4_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS, PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS ) ULIS_FOR_ALL_VEC4_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS, PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTION )
    #define PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC2( CLASS )   \
    PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS )       \
    PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS )       \
    PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTIONS_IN_VEC2( CLASS )
    #define PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC3( CLASS )   \
    PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS )       \
    PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS )       \
    PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTIONS_IN_VEC3( CLASS )
    #define PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC4( CLASS )   \
    PYULIS_DEFINE_VEC2_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS )       \
    PYULIS_DEFINE_VEC3_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS )       \
    PYULIS_DEFINE_VEC4_SWIZZLE_FUNCTIONS_IN_VEC4( CLASS )



    /////////
    // FVec2I
    py::class_< FVec2I >( m, "FVec2I" )
        .def( py::init<>() )
        .def( py::init< int >(), "value"_a )
        .def( py::init< int, int >(), "x"_a, "y"_a )
        .def( py::init< const FVec2I& >(), "vec"_a )
        .def( py::init< const FVec3I& >(), "vec"_a )
        .def( py::init< const FVec4I& >(), "vec"_a )
        .def( py::init< const FVec2F& >(), "vec"_a )
        .def( py::init< const FVec3F& >(), "vec"_a )
        .def( py::init< const FVec4F& >(), "vec"_a )
        .def( "Distance", &FVec2I::Distance )
        .def( "DistanceSquared", &FVec2I::DistanceSquared )
        .def( "ManhattanDistance", &FVec2I::ManhattanDistance )
        .def( "DotProduct", &FVec2I::DotProduct )
        .def( "Normalize", &FVec2I::Normalize )
        .def( "Normalized", &FVec2I::Normalized )
        .def( "DecimalPart", &FVec2I::DecimalPart )
        .def( py::self += int() )
        .def( py::self -= int() )
        .def( py::self *= int() )
        .def( py::self /= int() )
        .def( py::self += py::self )
        .def( py::self -= py::self )
        .def( py::self *= py::self )
        .def( py::self /= py::self )
        .def( py::self + int() )
        .def( py::self - int() )
        .def( py::self * int() )
        .def( py::self / int() )
        .def( py::self + py::self )
        .def( py::self - py::self )
        .def( py::self * py::self )
        .def( py::self / py::self )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( -py::self )
        PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC2( FVec2I )
        .def_readwrite( "x", &FVec2I::x )
        .def_readwrite( "y", &FVec2I::y );



    /////////
    // FVec3I
    py::class_< FVec3I >( m, "FVec3I" )
        .def( py::init<>() )
        .def( py::init< int >(), "value"_a )
        .def( py::init< int, int, int >(), "x"_a, "y"_a, "z"_a = 0 )
        .def( py::init< const FVec2I&, int >(), "vec"_a, "z"_a = 0 )
        .def( py::init< const FVec3I& >(), "vec"_a )
        .def( py::init< const FVec4I& >(), "vec"_a )
        .def( py::init< const FVec2F&, float >(), "vec"_a, "z"_a = 0.f )
        .def( py::init< const FVec3F& >(), "vec"_a )
        .def( py::init< const FVec4F& >(), "vec"_a )
        .def( "Distance", &FVec3I::Distance )
        .def( "DistanceSquared", &FVec3I::DistanceSquared )
        .def( "ManhattanDistance", &FVec3I::ManhattanDistance )
        .def( "DotProduct", &FVec3I::DotProduct )
        .def( "Normalize", &FVec3I::Normalize )
        .def( "Normalized", &FVec3I::Normalized )
        .def( py::self += int() )
        .def( py::self -= int() )
        .def( py::self *= int() )
        .def( py::self /= int() )
        .def( py::self += py::self )
        .def( py::self -= py::self )
        .def( py::self *= py::self )
        .def( py::self /= py::self )
        .def( py::self + int() )
        .def( py::self - int() )
        .def( py::self * int() )
        .def( py::self / int() )
        .def( py::self + py::self )
        .def( py::self - py::self )
        .def( py::self * py::self )
        .def( py::self / py::self )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( -py::self )
        PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC3( FVec3I )
        .def_readwrite( "x", &FVec3I::x )
        .def_readwrite( "y", &FVec3I::y )
        .def_readwrite( "z", &FVec3I::z );



    /////////
    // FVec3I
    py::class_< FVec4I >( m, "FVec4I" )
        .def( py::init<>() )
        .def( py::init< int >(), "value"_a )
        .def( py::init< int, int, int, int >(), "x"_a, "y"_a, "z"_a = 0, "w"_a = 0 )
        .def( py::init< const FVec2I&, int, int >(), "vec"_a, "z"_a = 0, "w"_a = 0 )
        .def( py::init< const FVec3I&, int >(), "vec"_a, "w"_a = 0 )
        .def( py::init< const FVec4I& >(), "vec"_a )
        .def( py::init< const FVec2F&, float, float >(), "vec"_a, "z"_a = 0.f, "w"_a = 0.f )
        .def( py::init< const FVec3F&, float >(), "vec"_a, "w"_a = 0 )
        .def( py::init< const FVec4F& >(), "vec"_a )
        .def( "Distance", &FVec4I::Distance )
        .def( "DistanceSquared", &FVec4I::DistanceSquared )
        .def( "ManhattanDistance", &FVec4I::ManhattanDistance )
        .def( "DotProduct", &FVec4I::DotProduct )
        .def( "Normalize", &FVec4I::Normalize )
        .def( "Normalized", &FVec4I::Normalized )
        .def( py::self += int() )
        .def( py::self -= int() )
        .def( py::self *= int() )
        .def( py::self /= int() )
        .def( py::self += py::self )
        .def( py::self -= py::self )
        .def( py::self *= py::self )
        .def( py::self /= py::self )
        .def( py::self + int() )
        .def( py::self - int() )
        .def( py::self * int() )
        .def( py::self / int() )
        .def( py::self + py::self )
        .def( py::self - py::self )
        .def( py::self * py::self )
        .def( py::self / py::self )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( -py::self )
        PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC4( FVec4I )
        .def_readwrite( "x", &FVec4I::x )
        .def_readwrite( "y", &FVec4I::y )
        .def_readwrite( "z", &FVec4I::z )
        .def_readwrite( "w", &FVec4I::w );

    /////////
    // FVec2F
    py::class_< FVec2F >( m, "FVec2F" )
        .def( py::init<>() )
        .def( py::init< float >(), "value"_a )
        .def( py::init< float, float >(), "x"_a, "y"_a )
        .def( py::init< const FVec2F& >(), "vec"_a )
        .def( py::init< const FVec3F& >(), "vec"_a )
        .def( py::init< const FVec4F& >(), "vec"_a )
        .def( py::init< const FVec2I& >(), "vec"_a )
        .def( py::init< const FVec3I& >(), "vec"_a )
        .def( py::init< const FVec4I& >(), "vec"_a )
        .def( "Distance", &FVec2F::Distance )
        .def( "DistanceSquared", &FVec2F::DistanceSquared )
        .def( "ManhattanDistance", &FVec2F::ManhattanDistance )
        .def( "DotProduct", &FVec2F::DotProduct )
        .def( "Normalize", &FVec2F::Normalize )
        .def( "Normalized", &FVec2F::Normalized )
        .def( "DecimalPart", &FVec2F::DecimalPart )
        .def( py::self += float() )
        .def( py::self -= float() )
        .def( py::self *= float() )
        .def( py::self /= float() )
        .def( py::self += py::self )
        .def( py::self -= py::self )
        .def( py::self *= py::self )
        .def( py::self /= py::self )
        .def( py::self + float() )
        .def( py::self - float() )
        .def( py::self * float() )
        .def( py::self / float() )
        .def( py::self + py::self )
        .def( py::self - py::self )
        .def( py::self * py::self )
        .def( py::self / py::self )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( -py::self )
        PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC2( FVec2F )
        .def_readwrite( "x", &FVec2F::x )
        .def_readwrite( "y", &FVec2F::y );



    /////////
    // FVec3F
    py::class_< FVec3F >( m, "FVec3F" )
        .def( py::init<>() )
        .def( py::init< float >(), "value"_a )
        .def( py::init< float, float, float >(), "x"_a, "y"_a, "z"_a = 0 )
        .def( py::init< const FVec2F&, float >(), "vec"_a, "z"_a = 0 )
        .def( py::init< const FVec3F& >(), "vec"_a )
        .def( py::init< const FVec4F& >(), "vec"_a )
        .def( py::init< const FVec2I&, int >(), "vec"_a, "z"_a = 0.f )
        .def( py::init< const FVec3I& >(), "vec"_a )
        .def( py::init< const FVec4I& >(), "vec"_a )
        .def( "Distance", &FVec3F::Distance )
        .def( "DistanceSquared", &FVec3F::DistanceSquared )
        .def( "ManhattanDistance", &FVec3F::ManhattanDistance )
        .def( "DotProduct", &FVec3F::DotProduct )
        .def( "Normalize", &FVec3F::Normalize )
        .def( "Normalized", &FVec3F::Normalized )
        .def( py::self += float() )
        .def( py::self -= float() )
        .def( py::self *= float() )
        .def( py::self /= float() )
        .def( py::self += py::self )
        .def( py::self -= py::self )
        .def( py::self *= py::self )
        .def( py::self /= py::self )
        .def( py::self + float() )
        .def( py::self - float() )
        .def( py::self * float() )
        .def( py::self / float() )
        .def( py::self + py::self )
        .def( py::self - py::self )
        .def( py::self * py::self )
        .def( py::self / py::self )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( -py::self )
        PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC3( FVec3F )
        .def_readwrite( "x", &FVec3F::x )
        .def_readwrite( "y", &FVec3F::y )
        .def_readwrite( "z", &FVec3F::z );



    /////////
    // FVec3F
    py::class_< FVec4F >( m, "FVec4F" )
        .def( py::init<>() )
        .def( py::init< float >(), "value"_a )
        .def( py::init< float, float, float, float >(), "x"_a, "y"_a, "z"_a = 0, "w"_a = 0 )
        .def( py::init< const FVec2F&, float, float >(), "vec"_a, "z"_a = 0, "w"_a = 0 )
        .def( py::init< const FVec3F&, float >(), "vec"_a, "w"_a = 0 )
        .def( py::init< const FVec4F& >(), "vec"_a )
        .def( py::init< const FVec2I&, int, int >(), "vec"_a, "z"_a = 0.f, "w"_a = 0.f )
        .def( py::init< const FVec3I&, int >(), "vec"_a, "w"_a = 0 )
        .def( py::init< const FVec4I& >(), "vec"_a )
        .def( "Distance", &FVec4F::Distance )
        .def( "DistanceSquared", &FVec4F::DistanceSquared )
        .def( "ManhattanDistance", &FVec4F::ManhattanDistance )
        .def( "DotProduct", &FVec4F::DotProduct )
        .def( "Normalize", &FVec4F::Normalize )
        .def( "Normalized", &FVec4F::Normalized )
        .def( py::self += float() )
        .def( py::self -= float() )
        .def( py::self *= float() )
        .def( py::self /= float() )
        .def( py::self += py::self )
        .def( py::self -= py::self )
        .def( py::self *= py::self )
        .def( py::self /= py::self )
        .def( py::self + float() )
        .def( py::self - float() )
        .def( py::self * float() )
        .def( py::self / float() )
        .def( py::self + py::self )
        .def( py::self - py::self )
        .def( py::self * py::self )
        .def( py::self / py::self )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( -py::self )
        PYULIS_DEFINE_ALL_SWIZZLE_FUNCTIONS_VEC4( FVec4F )
        .def_readwrite( "x", &FVec4F::x )
        .def_readwrite( "y", &FVec4F::y )
        .def_readwrite( "z", &FVec4F::z )
        .def_readwrite( "w", &FVec4F::w );



    /////////
    // ISample
    py::class_< ISample >( m, "ISample" )
        .def( py::init( &ISample:: ULIS_FAKE_FACTORY_NAME ) )
        .def( py::self == py::self )
        .def( py::self != py::self )
        .def( "Bits", static_cast< uint8* ( ISample::* )() >( &ISample::Bits ) )
        .def( "Channel8", &ISample::Channel8 )
        .def( "Channel16", &ISample::Channel16 )
        .def( "ChannelF", &ISample::ChannelF )
        .def( "SetChannel8", &ISample::SetChannel8 )
        .def( "SetChannel16", &ISample::SetChannel16 )
        .def( "SetChannelF", &ISample::SetChannelF )
        .def( "Alpha8", &ISample::Alpha8 )
        .def( "Alpha16", &ISample::Alpha16 )
        .def( "AlphaF", &ISample::AlphaF )
        .def( "A8", &ISample::A8 )
        .def( "A16", &ISample::A16 )
        .def( "AF", &ISample::AF )
        .def( "SetAlpha8", &ISample::SetAlpha8 )
        .def( "SetAlpha16", &ISample::SetAlpha16 )
        .def( "SetAlphaF", &ISample::SetAlphaF )
        .def( "SetA8", &ISample::SetA8 )
        .def( "SetA16", &ISample::SetA16 )
        .def( "SetAF", &ISample::SetAF )
        .def( "Grey8", &ISample::Grey8 )
        .def( "Red8", &ISample::Red8 )
        .def( "Green8", &ISample::Green8 )
        .def( "Blue8", &ISample::Blue8 )
        .def( "R8", &ISample::R8 )
        .def( "G8", &ISample::G8 )
        .def( "B8", &ISample::B8 )
        .def( "Hue8", &ISample::Hue8 )
        .def( "Saturation8", &ISample::Saturation8 )
        .def( "Lightness8", &ISample::Lightness8 )
        .def( "Value8", &ISample::Value8 )
        .def( "Cyan8", &ISample::Cyan8 )
        .def( "Magenta8", &ISample::Magenta8 )
        .def( "Yellow8", &ISample::Yellow8 )
        .def( "Key8", &ISample::Key8 )
        .def( "Luma8", &ISample::Luma8 )
        .def( "U8", &ISample::U8 )
        .def( "V8", &ISample::V8 )
        .def( "K8", &ISample::K8 )
        .def( "X8", &ISample::X8 )
        .def( "Y8", &ISample::Y8 )
        .def( "Z8", &ISample::Z8 )
        .def( "L8", &ISample::L8 )
        .def( "a8", &ISample::a8 )
        .def( "b8", &ISample::b8 )
        .def( "x8", &ISample::x8 )
        .def( "y8", &ISample::y8 )
        .def( "Grey16", &ISample::Grey16 )
        .def( "Red16", &ISample::Red16 )
        .def( "Green16", &ISample::Green16 )
        .def( "Blue16", &ISample::Blue16 )
        .def( "R16", &ISample::R16 )
        .def( "G16", &ISample::G16 )
        .def( "B16", &ISample::B16 )
        .def( "Hue16", &ISample::Hue16 )
        .def( "Saturation16", &ISample::Saturation16 )
        .def( "Lightness16", &ISample::Lightness16 )
        .def( "Value16", &ISample::Value16 )
        .def( "Cyan16", &ISample::Cyan16 )
        .def( "Magenta16", &ISample::Magenta16 )
        .def( "Yellow16", &ISample::Yellow16 )
        .def( "Key16", &ISample::Key16 )
        .def( "Luma16", &ISample::Luma16 )
        .def( "U16", &ISample::U16 )
        .def( "V16", &ISample::V16 )
        .def( "K16", &ISample::K16 )
        .def( "X16", &ISample::X16 )
        .def( "Y16", &ISample::Y16 )
        .def( "Z16", &ISample::Z16 )
        .def( "L16", &ISample::L16 )
        .def( "a16", &ISample::a16 )
        .def( "b16", &ISample::b16 )
        .def( "x16", &ISample::x16 )
        .def( "y16", &ISample::y16 )
        .def( "GreyF", &ISample::GreyF )
        .def( "RedF", &ISample::RedF )
        .def( "GreenF", &ISample::GreenF )
        .def( "BlueF", &ISample::BlueF )
        .def( "RF", &ISample::RF )
        .def( "GF", &ISample::GF )
        .def( "BF", &ISample::BF )
        .def( "HueF", &ISample::HueF )
        .def( "SaturationF", &ISample::SaturationF )
        .def( "LightnessF", &ISample::LightnessF )
        .def( "ValueF", &ISample::ValueF )
        .def( "CyanF", &ISample::CyanF )
        .def( "MagentaF", &ISample::MagentaF )
        .def( "YellowF", &ISample::YellowF )
        .def( "KeyF", &ISample::KeyF )
        .def( "LumaF", &ISample::LumaF )
        .def( "UF", &ISample::UF )
        .def( "VF", &ISample::VF )
        .def( "KF", &ISample::KF )
        .def( "XF", &ISample::XF )
        .def( "YF", &ISample::YF )
        .def( "ZF", &ISample::ZF )
        .def( "LF", &ISample::LF )
        .def( "aF", &ISample::aF )
        .def( "bF", &ISample::bF )
        .def( "xF", &ISample::xF )
        .def( "yF", &ISample::yF )
        .def( "SetGrey8", &ISample::SetGrey8 )
        .def( "SetRed8", &ISample::SetRed8 )
        .def( "SetGreen8", &ISample::SetGreen8 )
        .def( "SetBlue8", &ISample::SetBlue8 )
        .def( "SetR8", &ISample::SetR8 )
        .def( "SetG8", &ISample::SetG8 )
        .def( "SetB8", &ISample::SetB8 )
        .def( "SetHue8", &ISample::SetHue8 )
        .def( "SetSaturation8", &ISample::SetSaturation8 )
        .def( "SetLightness8", &ISample::SetLightness8 )
        .def( "SetValue8", &ISample::SetValue8 )
        .def( "SetCyan8", &ISample::SetCyan8 )
        .def( "SetMagenta8", &ISample::SetMagenta8 )
        .def( "SetYellow8", &ISample::SetYellow8 )
        .def( "SetKey8", &ISample::SetKey8 )
        .def( "SetLuma8", &ISample::SetLuma8 )
        .def( "SetU8", &ISample::SetU8 )
        .def( "SetV8", &ISample::SetV8 )
        .def( "SetK8", &ISample::SetK8 )
        .def( "SetX8", &ISample::SetX8 )
        .def( "SetY8", &ISample::SetY8 )
        .def( "SetZ8", &ISample::SetZ8 )
        .def( "SetL8", &ISample::SetL8 )
        .def( "Seta8", &ISample::Seta8 )
        .def( "Setb8", &ISample::Setb8 )
        .def( "Setx8", &ISample::Setx8 )
        .def( "Sety8", &ISample::Sety8 )
        .def( "SetGrey16", &ISample::SetGrey16 )
        .def( "SetRed16", &ISample::SetRed16 )
        .def( "SetGreen16", &ISample::SetGreen16 )
        .def( "SetBlue16", &ISample::SetBlue16 )
        .def( "SetR16", &ISample::SetR16 )
        .def( "SetG16", &ISample::SetG16 )
        .def( "SetB16", &ISample::SetB16 )
        .def( "SetHue16", &ISample::SetHue16 )
        .def( "SetSaturation16", &ISample::SetSaturation16 )
        .def( "SetLightness16", &ISample::SetLightness16 )
        .def( "SetValue16", &ISample::SetValue16 )
        .def( "SetCyan16", &ISample::SetCyan16 )
        .def( "SetMagenta16", &ISample::SetMagenta16 )
        .def( "SetYellow16", &ISample::SetYellow16 )
        .def( "SetKey16", &ISample::SetKey16 )
        .def( "SetLuma16", &ISample::SetLuma16 )
        .def( "SetU16", &ISample::SetU16 )
        .def( "SetV16", &ISample::SetV16 )
        .def( "SetK16", &ISample::SetK16 )
        .def( "SetX16", &ISample::SetX16 )
        .def( "SetY16", &ISample::SetY16 )
        .def( "SetZ16", &ISample::SetZ16 )
        .def( "SetL16", &ISample::SetL16 )
        .def( "Seta16", &ISample::Seta16 )
        .def( "Setb16", &ISample::Setb16 )
        .def( "Setx16", &ISample::Setx16 )
        .def( "Sety16", &ISample::Sety16 )
        .def( "SetGreyF", &ISample::SetGreyF )
        .def( "SetRedF", &ISample::SetRedF )
        .def( "SetGreenF", &ISample::SetGreenF )
        .def( "SetBlueF", &ISample::SetBlueF )
        .def( "SetRF", &ISample::SetRF )
        .def( "SetGF", &ISample::SetGF )
        .def( "SetBF", &ISample::SetBF )
        .def( "SetHueF", &ISample::SetHueF )
        .def( "SetSaturationF", &ISample::SetSaturationF )
        .def( "SetLightnessF", &ISample::SetLightnessF )
        .def( "SetValueF", &ISample::SetValueF )
        .def( "SetCyanF", &ISample::SetCyanF )
        .def( "SetMagentaF", &ISample::SetMagentaF )
        .def( "SetYellowF", &ISample::SetYellowF )
        .def( "SetKeyF", &ISample::SetKeyF )
        .def( "SetLumaF", &ISample::SetLumaF )
        .def( "SetUF", &ISample::SetUF )
        .def( "SetVF", &ISample::SetVF )
        .def( "SetKF", &ISample::SetKF )
        .def( "SetXF", &ISample::SetXF )
        .def( "SetYF", &ISample::SetYF )
        .def( "SetZF", &ISample::SetZF )
        .def( "SetLF", &ISample::SetLF )
        .def( "SetaF", &ISample::SetaF )
        .def( "SetbF", &ISample::SetbF )
        .def( "SetxF", &ISample::SetxF )
        .def( "SetyF", &ISample::SetyF )
        .def( "ToFormat", &ISample::ToFormat )
        .def_static( "ConvertFormat", &ISample::ConvertFormat )
        .def_static( "MixFormat", &ISample::MixFormat )
        .def_static( "MixRGB", &ISample::MixRGB )
        .def_static( "MixLab", &ISample::MixLab )
        .def( "Premultiply", &ISample::Premultiply )
        .def( "Unpremultiply", &ISample::Unpremultiply )
        .def( "Premultiplied", &ISample::Premultiplied )
        .def( "Unpremultiplied", &ISample::Unpremultiplied );



    /////////
    // FBlock
    py::class_< FBlock >( m, "FBlock" )
        .def(
            py::init<
              ULIS::uint16
            , ULIS::uint16
            , eFormat
            , const FColorSpace*
            , const FOnInvalidBlock&
            , const FOnCleanupData&
            >
            ()
            , "width"_a
            , "height"_a
            , "format"_a = eFormat::Format_RGBA8
            , "colorspace"_a = nullptr
            , "onInvalid"_a = FOnInvalidBlock()
            , "onCleanup"_a = FOnCleanupData( &OnCleanup_FreeMemory )
        )
        .def( "Area", &FBlock::Area )
        .def( "Bits", static_cast< uint8* ( FBlock::* )() >( &FBlock::Bits ) )
        .def( "BytesPerScanLine", &FBlock::BytesPerScanLine )
        .def( "BytesTotal", &FBlock::BytesTotal )
        .def( "Color", &FBlock::Color )
        .def( "Dirty", static_cast< void ( FBlock::* )( bool ) const >( &FBlock::Dirty), "call"_a = true )
        .def( "Dirty", static_cast< void ( FBlock::* )( const FRectI&, bool ) const >( &FBlock::Dirty ), "rect"_a, "call"_a = true )
        .def( "Height", &FBlock::Height )
        .def( "IsHollow", &FBlock::IsHollow )
        .def( "OnCleanup", &FBlock::OnCleanup, "callback"_a )
        .def( "OnInvalid", &FBlock::OnInvalid, "callback"_a )
        .def( "Pixel", static_cast< FPixel ( FBlock::* )( uint16, uint16 ) >( &FBlock::Pixel ) )
        .def( "PixelBits", static_cast< uint8* ( FBlock::* )( uint16, uint16 ) >( &FBlock::PixelBits ) )
        .def( "ReallocInternalData", &FBlock::ReallocInternalData )
        .def( "Rect", &FBlock::Rect )
        .def( "Sample", &FBlock::Sample )
        .def( "SampleSubpixel", &FBlock::SampleSubpixel )
        .def( "ScanlineBits", static_cast< uint8* ( FBlock::* )( uint16 ) >( &FBlock::ScanlineBits ) )
        .def( "SetPixel", &FBlock::SetPixel )
        .def( "Width", &FBlock::Width );
}

